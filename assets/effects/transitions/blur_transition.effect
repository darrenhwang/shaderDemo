CCEffect %{
  techniques:
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        mainTexture: { value: white }
        nextTexture: { value: white }
        progress: { value: 0.0, editor: { type: float, range: [0, 1], slide: true } }
        blurRadius: { value: 5.0, editor: { type: float, range: [0, 20], slide: true } }
        direction: { value: 0.0, editor: { type: float, range: [0, 1], slide: true } }
        blurStrength: { value: 0.5, editor: { type: float, range: [0, 1], slide: true } }
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec2 v_uv0;
  out vec4 v_color;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matWorld * pos;
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;
    return pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv0;
  in vec4 v_color;

  uniform sampler2D mainTexture;
  uniform sampler2D nextTexture;
  uniform Constant {
    float progress;
    float blurRadius;
    float direction;
    float blurStrength;
  };

  // 高斯模糊权重计算
  float gaussianWeight(float x, float sigma) {
    return exp(-(x * x) / (2.0 * sigma * sigma));
  }

  // 方向性模糊采样（优化版本）
  vec4 directionalBlur(sampler2D tex, vec2 uv, vec2 dir, float radius) {
    vec4 color = vec4(0.0);
    float totalWeight = 0.0;
    
    // 限制采样次数以提高性能
    float stepSize = max(1.0, radius / 5.0);
    
    for (float i = -radius; i <= radius; i += stepSize) {
      float weight = gaussianWeight(i, radius / 3.0);
      vec2 offset = dir * (i / radius);
      // 确保UV坐标在有效范围内
      vec2 sampleUV = clamp(uv + offset, vec2(0.0), vec2(1.0));
      color += texture(tex, sampleUV) * weight;
      totalWeight += weight;
    }
    
    return color / totalWeight;
  }

  vec4 frag () {
    // 输出调试信息
    if (progress < 0.0 || progress > 1.0) {
        return vec4(1.0, 0.0, 0.0, 1.0); // 红色表示错误
    }
    
    // 计算模糊方向
    vec2 blurDir;
    if (direction > 0.5) {
        blurDir = vec2(1.0, 0.0); // 水平方向
    } else {
        blurDir = vec2(0.0, 1.0); // 垂直方向
    }
    
    // 进行模糊处理
    vec4 currentScene = texture(mainTexture, v_uv0);
    vec4 nextScene = texture(nextTexture, v_uv0);
    
    // 混合两个场景
    vec4 finalColor = mix(currentScene, nextScene, progress);
    finalColor *= v_color;
    
    return finalColor;
  }
}% 